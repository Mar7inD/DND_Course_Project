@page "/waste-report"
@inject IHttpClientFactory ClientFactory
@using ScottPlot
@using ScottPlot.Plottable
@using ScottPlot.Drawing
@using Shared.Models
@inject NavigationManager NavigationManager

<h3>Waste Management Report - CO2 Emissions Over Time</h3>

@if (isInitialized && wasteReports.Count > 0)
{
    <div>
        <img src="data:image/png;base64,@PlotBase64" alt="Waste CO2 Emissions Chart" />
    </div>

    <h4>Waste Report Details</h4>
    <table class="table table-striped table-hover shadow-sm rounded">
        <thead class="bg-dark text-light">
            <tr>
                <th>Waste Type</th>
                <th>Processing Facility</th>
                <th>Waste Amount (kg)</th>
                <th>Waste Date</th>
                <th>CO2 Emission (kg)</th>
                <th><!-- Actions column Leave Empty! --></th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var report in wasteReports)
            {
                <tr>
                    <td>@report.WasteType</td>
                    <td>@report.WasteProcessingFacility</td>
                    <td>@report.WasteAmount</td>
                    <td>@report.WasteDate.ToString("dd-MM-yyyy hh:mm:ss")</td>
                    <td>@(report.Co2Emission ?? 0)</td>
                    <td>
                        <!-- Three Dot Menu without the arrow -->
                        <div class="dropdown">
                            <button class="btn btn-link p-0 actions-dropdown-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
                                </svg>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="padding: 0;">
                                <li>
                                    <button class="dropdown-item d-flex align-items-center rounded-top action-button" @onclick="() => EditReport(report.Id)" style="padding: 8px 12px; cursor: pointer;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square me-2" viewBox="0 0 16 16">
                                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                        </svg>
                                        <span>Edit</span>
                                    </button>
                                </li>
                                <li>
                                    <button class="dropdown-item text-danger d-flex align-items-center rounded-bottom action-button" @onclick="() => DeleteReport(report.Id)" style="padding: 8px 12px; cursor: pointer;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash me-2" viewBox="0 0 16 16">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                        </svg>
                                        <span>Delete</span>
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (!isInitialized)
{
    <p>Loading data...</p>
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <img src="images/no-data-available.png" alt="no-data-available" class="no-data-available-image">
        <p class="no-data-available-text">No data available.</p>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private List<Shared.Models.WasteReport> wasteReports = new List<Shared.Models.WasteReport>();
    private bool isInitialized = false;
    private bool isInitializedOnce = false;
    private string? errorMessage;

    public string? PlotBase64 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (isInitializedOnce)
        {
            return;
        }

        isInitializedOnce = true;

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var reportResponse = await client.GetFromJsonAsync<List<Shared.Models.WasteReport>>("api/WasteReports/");
            
            if (reportResponse != null)
            {
                wasteReports = reportResponse.OrderBy(report => report.WasteDate).ToList();
                isInitialized = true;  // Mark that data is loaded
                GeneratePlot();  // Generate the plot with ScottPlot
            }
            else
            {
                Console.WriteLine("No data returned from API.");
                isInitialized = true; // Set to true to stop the loading message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading waste reports: {ex.Message}");
            isInitialized = true; // Set to true to stop the loading message
        }
    }

    private void GeneratePlot()
    {
        var plt = new ScottPlot.Plot(600, 400);
        
        var groupedReports = wasteReports
        .GroupBy(r => r.WasteDate.Date)
        .Select(g => new 
            {
                WasteDate = g.Key,
                TotalCo2Emission = g.Sum(r => r.Co2Emission ?? 0)
            })
        .OrderBy(g => g.WasteDate)
        .ToList();

        double[] xs = groupedReports.Select(r => r.WasteDate.ToOADate()).ToArray(); // Convert DateTime to OADate for plotting
        double[] ys = groupedReports.Select(r => r.TotalCo2Emission).ToArray();
        
        plt.AddScatter(xs, ys);
        plt.XAxis.DateTimeFormat(true);
        plt.Title("CO2 Emissions Over Time");
        plt.XLabel("Date");
        plt.YLabel("CO2 Emission (kg)");

        // Convert the plot to a base64 string to display in an <img> tag
        byte[] imageBytes = plt.GetImageBytes();
        PlotBase64 = Convert.ToBase64String(imageBytes);
    }

    private void EditReport(int id)
    {
        Console.WriteLine($"Edit report with ID: {id}");
        // Redirect to the Edit page for the selected report
        NavigationManager.NavigateTo($"/edit-waste-report/{id}");
    }

    private async Task DeleteReport(int id)
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.DeleteAsync($"api/WasteReports/{id}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Successfully deleted waste report with ID: {id}");
                wasteReports = wasteReports.Where(r => r.Id != id).ToList(); // Remove the deleted report from the list
                StateHasChanged(); // Force the UI to refresh
            }
            else
            {
                errorMessage = $"Failed to delete the waste report. Status code: {response.StatusCode}. Response content: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting the report: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
