@page "/waste-analytics"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<PageTitle>Waste Analytics</PageTitle>

<h1 class="dashboard-title">Waste Analytics and Reports</h1>
<p class="dashboard-subtitle">Track and edit waste reports and and get overview of CO2 emissions</p>

@if (isInitialized && wasteReports.Count > 0)
{
    <div class="chart-section-row">
        <!-- Line Chart for CO2 Emissions Over Last 7 Days -->
        <div class="chart-section">
            <h3 class="chart-title">CO2 Emissions Over Last 7 Days</h3>
            <LineChart @ref="lineChart" Width="800" Height="300" style="width: 800px;" />
        </div>

        <div class="d-flex flex-column justify-content-between">
            <!-- Summary Card for All-Time CO2 Emissions -->
            <div class="summary-card">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-column justify-content-start align-items-start">
                            <h1 class="card-value">@totalCo2Emissions kg</h1>
                            <p class="card-text">All-Time CO2 Emissions</p>
                        </div>
                        <img src="images/reduction.png" alt="Salling Group Logo">
                    </div>
                </div>
            </div>

            <!-- Summary Card for Latest CO2 Emission -->
            <div class="summary-card">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-column justify-content-start align-items-start">
                            <h1 class="card-value">@latestCo2Emission kg</h1>
                            <p class="card-text">Latest CO2 Impact</p>
                        </div>
                        <img src="images/carbon-dioxide.png" alt="CO2 Emission Logo">
                    </div>
                </div>
            </div>
        </div>

    </div>


    <h3>Waste Report Details</h3>
    <table class="table table-striped table-hover shadow-sm rounded">
        <thead class="bg-dark text-light">
            <tr>
                <th>Waste Type</th>
                <th>Processing Facility</th>
                <th>Waste Amount (kg)</th>
                <th>Waste Date</th>
                <th>CO2 Emission (kg)</th>
                @if (userRole == "Manager")
                {
                    <th><!-- Actions column Leave Empty! --></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var report in wasteReports)
            {
                <tr>
                    <td>@report.WasteType</td>
                    <td>@report.WasteProcessingFacility</td>
                    <td>@report.WasteAmount</td>
                    <td>@report.WasteDate.ToString("dd-MM-yyyy")</td>
                    <td>@(report.Co2Emission ?? 0)</td>
                    @if (userRole == "Manager")
                    {
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-link p-0 actions-dropdown-btn" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
                                    </svg>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="padding: 0;">
                                    <li>
                                        <button class="dropdown-item d-flex align-items-center rounded-top action-button" @onclick="() => ShowEditModal(report.Id)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square me-2" viewBox="0 0 16 16">
                                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                            </svg>
                                            <span>Edit</span>
                                        </button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item text-danger d-flex align-items-center rounded-bottom action-button" @onclick="() => ShowDeleteModal(report)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash me-2" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                                            </svg>
                                            <span>Delete</span>
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else if (!isInitialized)
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <svg xmlns="http://www.w3.org/2000/svg" width="2.6rem" height="2.6rem" viewBox="0 0 24 24"><circle cx="12" cy="2" r="0" fill="black"><animate attributeName="r" begin="0" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(45 12 12)"><animate attributeName="r" begin="0.125s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(90 12 12)"><animate attributeName="r" begin="0.25s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(135 12 12)"><animate attributeName="r" begin="0.375s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(180 12 12)"><animate attributeName="r" begin="0.5s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(225 12 12)"><animate attributeName="r" begin="0.625s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(270 12 12)"><animate attributeName="r" begin="0.75s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle><circle cx="12" cy="2" r="0" fill="black" transform="rotate(315 12 12)"><animate attributeName="r" begin="0.875s" calcMode="spline" dur="1s" keySplines="0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8" repeatCount="indefinite" values="0;2;0;0"/></circle></svg>
        <p class="loading-data-text">Loading data...</p>
        <p class="loading-data-text-recommend">(Try Refreshing the Page)</p>
    </div>
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <img src="images/no-data-available.png" alt="no-data-available" class="no-data-available-image">
        <p class="no-data-available-text">No data available.</p>
    </div>
}

@* Modals for Edit and Delete *@
<DeleteReportModal @ref="deleteModal" SelectedReport="selectedReport" OnDeleteSuccess="RefreshPage" />
<EditWasteReportModal @ref="editWasteReportModal" OnSubmitSuccess="RefreshPage" />

@code {
    [CascadingParameter] public string? EmployeeId { get; set; }
    private List<WasteReport> wasteReports = new();
    private WasteReport? selectedReport;
    private bool isInitialized = false;
    private bool isInitializedOnce = false;
    private string? errorMessage;
    private string? userRole;
    private DeleteReportModal deleteModal = default!;
    private EditWasteReportModal editWasteReportModal = default!;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private double totalCo2Emissions = 0;
    private double latestCo2Emission = 0;

    protected override async Task OnInitializedAsync()
    {
        if (isInitializedOnce)
        {
            return;
        }

        isInitializedOnce = true;

        try
        {
            userRole = await LocalStorage.GetItemAsync<string>("userRole");

            var client = ClientFactory.CreateClient("BackendAPI");
            var reportResponse = await client.GetFromJsonAsync<List<WasteReport>>("api/WasteReports/");

            if (reportResponse != null && reportResponse.Any())
            {
                // Sort waste reports by CreatedOn in descending order (latest first)
                wasteReports = reportResponse.OrderByDescending(report => report.CreatedOn).ToList();

                // Calculate total CO2 emissions
                totalCo2Emissions = Math.Floor(wasteReports.Sum(r => r.Co2Emission ?? 0));

                // Calculate the latest CO2 emission (most recent CreatedOn)
                var latestReport = wasteReports.FirstOrDefault(); // Already sorted by CreatedOn
                latestCo2Emission = latestReport?.Co2Emission ?? 0;

                // Generate charts
                GenerateLineChart();
            }
            else
            {
                Console.WriteLine("No data returned from API.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading waste reports: {ex.Message}");
        }
        finally
        {
            isInitialized = true;
            StateHasChanged();
        }
    }

    private void GenerateLineChart()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        // Get the date range for the last 7 days
        var sevenDaysAgo = DateTime.Now.Date.AddDays(-7);

        // Filter data for the last 7 days and group by date
        var groupedData = wasteReports
            .Where(r => r.WasteDate.Date >= sevenDaysAgo) // Filter for last 7 days
            .GroupBy(r => r.WasteDate.Date) // Group by the date part of WasteDate
            .Select(g => new
            {
                Date = g.Key,
                TotalCo2Emission = g.Sum(r => r.Co2Emission ?? 0) // Sum CO2 emissions, handling nulls
            })
            .OrderBy(g => g.Date) // Ensure dates are in ascending order
            .ToList();

        // Extract labels and data from grouped results
        var labels = groupedData.Select(g => g.Date.ToString("dd-MM-yyyy")).ToList();
        var co2EmissionData = groupedData.Select(g => (double?)g.TotalCo2Emission).ToList(); // Convert to nullable double

        // Create the dataset for the line chart
        var dataset = new LineChartDataset
        {
            Label = "CO2 Emissions",
            Data = co2EmissionData, // Use aggregated data
            BackgroundColor = colors[0],
            BorderColor = colors[0],
            BorderWidth = 2,
            HoverBorderWidth = 4,
        };

        // Prepare chart data and options
        var datasets = new List<IChartDataset> { dataset };
        chartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Locale = "en-US";
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Date", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "CO2 Emissions (kg)", Display = true };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (chartData != null && isInitialized)
                {
                    await lineChart.InitializeAsync(chartData, lineChartOptions);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing line chart: {ex.Message}");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task ShowEditModal(int reportId)
    {
        await editWasteReportModal.ShowModal(reportId);
    }

    private async Task ShowDeleteModal(WasteReport report)
    {
        selectedReport = report;
        await deleteModal.ShowAsync();
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
