@page "/register"
@layout EmptyLayout

@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService LocalStorage

<h2>Register</h2>

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="employeeId">Employee Id</label>
        <InputText id="employeeId" class="form-control" @bind-Value="@registerModel.EmployeeId" />
    </div>

    <div class="form-group">
        <label for="name">Full Name</label>
        <InputText id="name" class="form-control" @bind-Value="@registerModel.Name" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="@registerModel.Password" />
    </div>

    <div class="form-group">
        <label for="role">Role (Employee or Manager)</label>
        <InputSelect id="role" class="form-control" @bind-Value="@registerModel.Role">
            <option value="">Select a role</option>
            <option value="Employee">Employee</option>
            <option value="Manager">Manager</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-secondary">Register</button>
</EditForm>

@if (message != null)
{
    <div class="alert @messageClass">
        @message
    </div>
}

@code {
    [SupplyParameterFromForm]
    private PersonBase registerModel { get; set; } = new PersonBase();

    private string? message;
    private string messageClass = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");

            // Update endpoint if necessary
            var response = await client.PostAsJsonAsync("api/People/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                foreach (var kvp in responseData)
                {
                    Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}");
                }
                
                if (responseData != null && responseData.TryGetValue("token", out var token)) // Ensure key matches API response
                {
                    await LocalStorage.SetItemAsync("authToken", token); // Store the token in local storage
                    Console.WriteLine("Registration successful! Token stored.");
                    message = "Registration successful! Token stored.";
                    messageClass = "alert-success";
                }
                else
                {
                    message = "Registration succeeded but token was not generated.";
                    messageClass = "alert-warning";
                }
            }
            else
            {
                message = "Registration failed!";
                messageClass = "alert-danger";
                Console.WriteLine($"Failed registration. Status Code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
            Console.WriteLine($"Exception occurred: {ex.Message} | StackTrace: {ex.StackTrace}");
        }
    }
}
