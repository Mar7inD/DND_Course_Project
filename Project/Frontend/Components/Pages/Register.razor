@page "/register"
@layout EmptyLayout

@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService LocalStorage

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="p-4" style="width: 100%; max-width: 400px;">

        <div style="display: flex; justify-content: center;">
            <img src="images/salling-group-logo.png" alt="Salling Group Logo">
        </div>

        <h2 class="text-center mb-4">Register</h2>

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" FormName="registerForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="employeeId">Employee Id</label>
                <InputText id="employeeId" class="form-control" @bind-Value="@registerModel.EmployeeId" style="font-size: 18px;" />
            </div>

            <div class="form-group mt-3">
                <label for="name">Full Name</label>
                <InputText id="name" class="form-control" @bind-Value="@registerModel.Name" style="font-size: 18px;" />
            </div>

            <div class="form-group mt-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" style="font-size: 18px;" />
            </div>

            <div class="form-group mt-3">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="@registerModel.Password" style="font-size: 18px;" />
            </div>

            <div class="form-group mt-3">
                <label for="role">Role (Employee or Manager)</label>
                <InputSelect id="role" class="form-control" @bind-Value="@registerModel.Role" style="font-size: 18px;">
                    <option value="">Select a role</option>
                    <option value="Employee">Employee</option>
                    <option value="Manager">Manager</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-secondary w-100 mt-4" style="font-size: 20px;">Register</button>
        </EditForm>
    </div>
</div>

@if (message != null)
{
    <div class="alert @messageClass">
        @message
    </div>
}

@code {
    [SupplyParameterFromForm]
    private PersonBase registerModel { get; set; } = new PersonBase();

    private string? message;
    private string messageClass = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");

            // Update endpoint if necessary
            var response = await client.PostAsJsonAsync("api/People/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                foreach (var kvp in responseData)
                {
                    Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}");
                }
                
                if (responseData != null && responseData.TryGetValue("token", out var token)) // Ensure key matches API response
                {
                    await LocalStorage.SetItemAsync("authToken", token); // Store the token in local storage
                    Console.WriteLine("Registration successful! Token stored.");
                    message = "Registration successful! Token stored.";
                    messageClass = "alert-success";
                }
                else
                {
                    message = "Registration succeeded but token was not generated.";
                    messageClass = "alert-warning";
                }
            }
            else
            {
                message = "Registration failed!";
                messageClass = "alert-danger";
                Console.WriteLine($"Failed registration. Status Code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
            Console.WriteLine($"Exception occurred: {ex.Message} | StackTrace: {ex.StackTrace}");
        }
    }
}
