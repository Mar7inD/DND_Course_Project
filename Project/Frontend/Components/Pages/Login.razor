@page "/login"
@layout Layout.EmptyLayout
@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h2>Login</h2>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="employeeId">Employee ID</label>
        <InputText id="employeeId" class="form-control" @bind-Value="loginModel.EmployeeId" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private PersonBase loginModel { get; set; } = new PersonBase();

    private async Task HandleLogin()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            // Send the login data to the backend API
            var response = await client.PostAsJsonAsync("api/People/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Retrieve the token from the response
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                foreach (var kvp in responseData)
                {
                    Console.WriteLine($"Login: Key: {kvp.Key}, Value: {kvp.Value}");
                }
                if (responseData != null && responseData.TryGetValue("token", out var token))
                {
                    Console.WriteLine("Login successful. Token stored.");
                    
                    // Store the token in local storage
                    await LocalStorage.SetItemAsync("authToken", token);
                    
                    // Redirect to the dashboard
                    NavigationManager.NavigateTo("/dashboard");
                }
                else
                {
                    Console.WriteLine("Login succeeded but token was not received.");
                }
            }
            else
            {
                Console.WriteLine("Login failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
