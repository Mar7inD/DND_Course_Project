@page "/login"
@layout LoginLayout
@inject IHttpClientFactory ClientFactory
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="p-4" style="width: 100%; max-width: 400px;">

        <div style="display: flex; justify-content: center;">
            <img src="images/salling-group-logo.png" alt="Salling Group Logo">
        </div>
        
        <h2 class="text-center mb-4">Login</h2>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="employeeId">Employee ID</label>
                <InputText id="employeeId" class="form-control" @bind-Value="loginModel.EmployeeId" placeholder="(e.g. 123456)" style="font-size: 18px;" />
            </div>

            <div class="form-group mt-3">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" placeholder="(e.g. 1234)" style="font-size: 18px;" />
            </div>

            <button type="submit" class="btn btn-primary w-100 mt-4" style="font-size: 20px;">Login</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private PersonBaseDTO loginModel { get; set; } = new PersonBaseDTO();
    private string errorLabel = "";

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Redirect if already authenticated
            NavigationManager.NavigateTo("/dashboard"); // or any other page you want to redirect to
        }
    }

    private async Task HandleLogin()
    { 
        errorLabel = "";

        try
        {
            await AuthService.LoginAsync(loginModel.EmployeeId, loginModel.Password);
            NavigationManager.NavigateTo("/dashboard");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }
    
}
