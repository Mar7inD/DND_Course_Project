@page "/dashboard"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ChartGeneration ChartGeneration
@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<h1 class="dashboard-title">Dashboard</h1>
<p class="dashboard-subtitle">Track and analyze waste data and CO2 emissions</p>

<!-- Flex container for Line Chart and Bar Chart -->
<div class="chart-section-row">
    <!-- Line Chart for CO2 Emissions Over Time -->
    <div class="chart-section">
        <h3 class="chart-title">CO2 Emissions Over Last 7 Days</h3>
            <LineChart @ref="lineChart" Width="750" Height="300" style="width: 800px;" />
    </div>

    <!-- Pie Chart for Waste Type Distribution -->
    <div class="chart-section">
        <h3 class="chart-title">Waste Type Distribution (kg)</h3>
            <div class="chart-container">
                <PieChart @ref="pieChart" Width="300" Height="300" />
            </div>
    </div>
</div>

<!-- Stacked Bar Chart for Waste Collection Trends -->
<div class="chart-section">
    <h3 class="chart-title">Waste Collection Trends</h3>
        <div class="chart-container">
            <BarChart @ref="barChart" Width="1180" Height="300" />
        </div>
</div>

@code {
    private List<WasteReport> wasteReports = new();

    private LineChart lineChart = default!;
    private PieChart pieChart = default!;
    private BarChart barChart = default!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.GetFromJsonAsync<List<WasteReport>>("api/WasteReports");

            if (response != null)
            {
                wasteReports = response;
            }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading waste reports: {ex.Message}");
            }
            try
            {
                // Check if charts are not null before initializing them.
                if (lineChart != null)
                {
                    var (lineChartData, lineChartOptions) = ChartGeneration.GenerateLineChart(wasteReports);
                    await lineChart.InitializeAsync(lineChartData, lineChartOptions);
                }

                if (pieChart != null)
                {
                    var (pieChartData, pieChartOptions) = ChartGeneration.GeneratePieChart(wasteReports);
                    await pieChart.InitializeAsync(pieChartData, pieChartOptions);
                }

                if (barChart != null)
                {
                    var (barChartData, barChartOptions) = ChartGeneration.GenerateBarChart(wasteReports);
                    await barChart.InitializeAsync(barChartData, barChartOptions);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing charts: {ex.Message}");
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}
