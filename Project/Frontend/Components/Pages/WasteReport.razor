@page "/waste-report"
@inject IHttpClientFactory ClientFactory
@using ScottPlot
@using ScottPlot.Plottable
@using ScottPlot.Drawing

<h3>Waste Management Report - CO2 Emissions Over Time</h3>

@if (isInitialized && wasteReports.Count > 0)
{
    <div>
        <img src="data:image/png;base64,@PlotBase64" alt="Waste CO2 Emissions Chart" />
    </div>

    <h4>Waste Report Details</h4>
    <table class="table table-striped table-hover shadow-sm rounded">
        <thead class="bg-dark text-light">
            <tr>
                <th>Waste Type</th>
                <th>Processing Facility</th>
                <th>Waste Amount (kg)</th>
                <th>Waste Date</th>
                <th>CO2 Emission (kg)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in wasteReports)
            {
                <tr>
                    <td>@report.WasteType</td>
                    <td>@report.WasteProcessingFacility</td>
                    <td>@report.WasteAmount</td>
                    <td>@report.WasteDate.ToString("dd-MM-yyyy hh:mm:ss")</td>
                    <td>@(report.Co2Emission ?? 0)</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (!isInitialized)
{
    <p>Loading data...</p>
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <img src="images/no-data-available.png" alt="no-data-available" class="no-data-available-image">
        <p class="no-data-available-text">No data available.</p>
    </div>
}

@code {

    private List<Backend.Models.WasteReport> wasteReports = new List<Backend.Models.WasteReport>();
    private bool isInitialized = false;
    private bool isInitializedOnce = false;
    string? chartPath;

    public string? PlotBase64 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (isInitializedOnce)
        {
            return;
        }

        isInitializedOnce = true;

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var reportResponse = await client.GetFromJsonAsync<List<Backend.Models.WasteReport>>("api/WasteReports/");

            if (reportResponse != null)
            {
                wasteReports = reportResponse;
                isInitialized = true;  // Mark that data is loaded
                GeneratePlot();  // Generate the plot with ScottPlot
            }
            else
            {
                Console.WriteLine("No data returned from API.");
                isInitialized = true; // Set to true to stop the loading message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading waste reports: {ex.Message}");
            isInitialized = true; // Set to true to stop the loading message
        }
    }

    private void GeneratePlot()
    {
        var plt = new ScottPlot.Plot(600, 400);
        
        double[] xs = wasteReports.Select(r => r.WasteDate.ToOADate()).ToArray(); // Convert DateTime to OADate for plotting
        double[] ys = wasteReports.Select(r => r.Co2Emission ?? 0).ToArray();
        
        plt.AddScatter(xs, ys);
        plt.XAxis.DateTimeFormat(true);
        plt.Title("CO2 Emissions Over Time");
        plt.XLabel("Date");
        plt.YLabel("CO2 Emission (kg)");

        // Convert the plot to a base64 string to display in an <img> tag
        byte[] imageBytes = plt.GetImageBytes();
        PlotBase64 = Convert.ToBase64String(imageBytes);
    }
}
