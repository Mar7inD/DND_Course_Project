@page "/waste-report"
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory

<h3>Waste Management Report - CO2 Emissions Over Time</h3>

@if (isInitialized && wasteReports.Count > 0)
{
    <canvas id="co2Chart" width="400" height="200"></canvas> <!-- Canvas for the chart -->

    <h4>Waste Report Details</h4>
    <table class="table table-striped table-hover shadow-sm rounded">
        <thead class="bg-dark text-light">
            <tr>
                <th>Waste Type</th>
                <th>Processing Facility</th>
                <th>Waste Amount (kg)</th>
                <th>Waste Date</th>
                <th>CO2 Emission (kg)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in wasteReports)
            {
                <tr>
                    <td>@report.WasteType</td>
                    <td>@report.WasteProcessingFacility</td>
                    <td>@report.WasteAmount</td>
                    <td>@report.WasteDate.ToString("dd-MM-yyyy hh:mm:ss")</td>
                    <td>@(report.Co2Emission ?? 0)</td>
                </tr>
            }
        </tbody>
    </table>
}

else if (!isInitialized)
{
    <p>Loading data...</p>
}
else
{   
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <img src="images/no-data-available.png" alt="no-data-available" class="no-data-available-image">
        <p class="no-data-available-text">No data available.</p>
    </div>
}

@code {

    private List<Backend.Models.WasteReport> wasteReports = new List<Backend.Models.WasteReport>();
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.GetFromJsonAsync<List<Backend.Models.WasteReport>>("api/WasteReports/");

            if (response != null)
            {
                wasteReports = response;
                isInitialized = true;  // Mark that data is loaded
                Console.WriteLine("Data initialized: " + isInitialized);
                StateHasChanged(); // Force a re-render so OnAfterRenderAsync can call JS
            }
            else
            {
                Console.WriteLine("No data returned from API.");
                isInitialized = true; // Set to true to stop the loading message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading waste reports: {ex.Message}");
            isInitialized = true; // Set to true to stop the loading message
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Ensure that the chart is rendered only after data is loaded and it's the first render
        if (firstRender && isInitialized && wasteReports.Count > 0)
        {
            Console.WriteLine("OnAfterRenderAsync is triggered");
            await GenerateCo2Chart();
        }
    }

    private async Task GenerateCo2Chart()
    {
        var co2Data = wasteReports.Select(r => r.Co2Emission ?? 0).ToArray();
        var dates = wasteReports.Select(r => r.WasteDate.ToString("yyyy-MM-dd")).ToArray();

        Console.WriteLine($"Dates: {string.Join(", ", dates)}");
        Console.WriteLine($"CO2 Data: {string.Join(", ", co2Data)}");

        // Call JavaScript function to create the chart
        await JS.InvokeVoidAsync("createCo2Chart", dates, co2Data);
    }
}
