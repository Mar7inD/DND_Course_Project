@page "/new-waste-report"
@layout Layout.MainLayout
@inject IHttpClientFactory ClientFactory

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow p-4" style="max-width: 700px;">
                <div class="card-body">
                    <h3 class="card-title mb-4">Add New Waste Report</h3>

                    <EditForm Model="@newWasteReport" OnValidSubmit="@HandleSubmit" FormName="wasteReportForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="wasteType" class="form-label">Waste Type</label>
                            <InputSelect id="wasteType" class="form-select" @bind-Value="@newWasteReport.WasteType">
                                @foreach (var wasteType in wasteTypes)
                                {
                                    <option value="@wasteType">@wasteType</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="wasteFacility" class="form-label">Processing Facility</label>
                            <InputSelect id="wasteFacility" class="form-select" @bind-Value="@newWasteReport.WasteProcessingFacility">
                                @foreach (var facility in wasteFacilities)
                                {
                                    <option value="@facility">@facility</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="wasteAmount" class="form-label">Waste Amount (kg)</label>
                            <InputNumber id="wasteAmount" class="form-control" @bind-Value="@newWasteReport.WasteAmount" />
                        </div>

                        <div class="mb-3">
                            <label for="wasteDate" class="form-label">Date</label>
                            <InputDate id="wasteDate" class="form-control" @bind-Value="@newWasteReport.WasteDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100 submit-btn">Submit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@if (message != null)
{
    <div class="alert @messageClass mt-3">
        @message
    </div>
}

@code {
    [SupplyParameterFromForm]
    private WasteReport newWasteReport { get; set; } = new WasteReport
    {
        WasteDate = DateTime.Now // Initialize with the current date and time
    };

    private string? message;
    private string messageClass = string.Empty;

    private List<string> wasteTypes = new List<string> {
        "Organic", "Plastic", "Metal", "Wood", "Paper", "Electronic", "Incineration"
    };

    private List<string> wasteFacilities = new List<string> {
        "Recycling", "Incineration", "Landfill", "Composting"
    };

    private async Task HandleSubmit()
    {
        // Add the current time to WasteDate
        newWasteReport.WasteDate = newWasteReport.WasteDate.Date.Add(DateTime.Now.TimeOfDay);

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");

            // Log the request content
            Console.WriteLine($"Sending request with: Type={newWasteReport.WasteType}, Facility={newWasteReport.WasteProcessingFacility}, Amount={newWasteReport.WasteAmount}, Date={newWasteReport.WasteDate}");

            var response = await client.PostAsJsonAsync("api/WasteReports", newWasteReport);

            if (response.IsSuccessStatusCode)
            {
                message = "Waste report submitted successfully!";
                messageClass = "alert-success";
            }
            else
            {
                message = "Submission failed!";
                messageClass = "alert-danger";
                Console.WriteLine($"Failed submission. Status Code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
            Console.WriteLine($"Exception occurred: {ex.Message} | StackTrace: {ex.StackTrace}");
        }

        // Log the final state of the waste report model
        Console.WriteLine($"Final wasteReportModel: Type={newWasteReport.WasteType}, Facility={newWasteReport.WasteProcessingFacility}, Amount={newWasteReport.WasteAmount}, Date={newWasteReport.WasteDate}");
    }
}
