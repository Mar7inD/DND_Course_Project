@page "/edit-waste-report/{id:int}"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<h3>Edit Waste Report</h3>

@if (editWasteReport != null)
{
    <EditForm Model="@editWasteReport" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="wasteType" class="form-label">Waste Type</label>
            <InputSelect id="wasteType" class="form-select" @bind-Value="@editWasteReport.WasteType">
                @foreach (var wasteType in wasteTypes)
                {
                    <option value="@wasteType">@wasteType</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="wasteFacility" class="form-label">Processing Facility</label>
            <InputSelect id="wasteFacility" class="form-select" @bind-Value="@editWasteReport.WasteProcessingFacility">
                @foreach (var facility in wasteFacilities)
                {
                    <option value="@facility">@facility</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="wasteAmount" class="form-label">Waste Amount (kg)</label>
            <InputNumber id="wasteAmount" class="form-control" @bind-Value="@editWasteReport.WasteAmount" />
        </div>

        <div class="mb-3">
            <label for="wasteDate" class="form-label">Date</label>
            <InputDate id="wasteDate" class="form-control" @bind-Value="@editWasteReport.WasteDate" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Save Changes</button>
    </EditForm>
}
else
{
    <p>Loading waste report data...</p>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private WasteReport? editWasteReport;
    private string? errorMessage;

    private List<string> wasteTypes = new List<string> {
        "Organic", "Plastic", "Metal", "Wood", "Paper", "Electronic", "Incineration"
    };

    private List<string> wasteFacilities = new List<string> {
        "Recycling", "Incineration", "Landfill", "Composting"
    };

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            editWasteReport = await client.GetFromJsonAsync<WasteReport>($"api/WasteReports/{id}");

            if (editWasteReport == null)
            {
                errorMessage = "Failed to load waste report.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading waste report: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.PutAsJsonAsync($"api/WasteReports/{editWasteReport!.Id}", editWasteReport);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/waste-report");
            }
            else
            {
                errorMessage = $"Failed to save changes: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
