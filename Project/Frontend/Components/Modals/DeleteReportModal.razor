<Modal @ref="deleteModal" title="Delete Waste Report" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        @if (SelectedReport != null)
        {
            <p><b>You are about to delete the following report:</b></p>
            <p><b>Type:</b> @SelectedReport.WasteType</p>
            <p><b>Facility:</b> @SelectedReport.WasteProcessingFacility</p>
            <p><b>Amount (kg):</b> @SelectedReport.WasteAmount</p>
            <p><b>Date:</b> @SelectedReport.WasteDate.ToString("dd-MM-yyyy HH:mm:ss")</p>
            <p><b>CO2 Emission (kg):</b> @(SelectedReport.Co2Emission ?? 0)</p>
            <p><b>Are you sure you want to delete this report?</b></p>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideAsync">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="ConfirmDelete">Delete</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public WasteReport? SelectedReport { get; set; } // The selected report to delete
    [Parameter] public EventCallback OnDeleteSuccess { get; set; } // Event to notify successful deletion
    [Inject] private IHttpClientFactory ClientFactory { get; set; } = default!; // Injected HTTP Client Factory

    private Modal deleteModal = default!;
    private string? errorMessage;

    public async Task ShowAsync()
    {
        await deleteModal.ShowAsync();
    }

    public async Task HideAsync()
    {
        await deleteModal.HideAsync();
    }

    private async Task ConfirmDelete()
    {
        if (SelectedReport != null)
        {
            try
            {
                var client = ClientFactory.CreateClient("BackendAPI");
                var response = await client.DeleteAsync($"api/WasteReports/{SelectedReport.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await OnDeleteSuccess.InvokeAsync(); // Notify parent component
                    await HideAsync(); // Hide the modal
                }
                else
                {
                    errorMessage = "Failed to delete the report. Please try again.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
    }
}