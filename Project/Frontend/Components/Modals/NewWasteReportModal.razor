@inherits LayoutComponentBase
@inject IHttpClientFactory ClientFactory

<Modal @ref="newWasteReportModal" title="Add New Waste Report" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="@newWasteReport" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="wasteType" class="form-label">Waste Type</label>
                <InputSelect id="wasteType" class="form-select" @bind-Value="@newWasteReport.WasteType">
                    @foreach (var wasteType in wasteTypes)
                    {
                        <option value="@wasteType">@wasteType</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="wasteFacility" class="form-label">Processing Facility</label>
                <InputSelect id="wasteFacility" class="form-select" @bind-Value="@newWasteReport.WasteProcessingFacility">
                    @foreach (var facility in wasteFacilities)
                    {
                        <option value="@facility">@facility</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="wasteAmount" class="form-label">Waste Amount (kg)</label>
                <InputNumber id="wasteAmount" class="form-control" @bind-Value="@newWasteReport.WasteAmount" />
            </div>

            <div class="mb-3">
                <label for="wasteDate" class="form-label">Date</label>
                <InputDate id="wasteDate" class="form-control" @bind-Value="@newWasteReport.WasteDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
            </div>

            <button type="submit" class="btn btn-primary w-100 submit-btn">Submit</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@if (message != null)
{
    <div class="alert @messageClass mt-3">
        @message
    </div>
}

@code {
    [Parameter] public EventCallback OnSubmitSuccess { get; set; }

    private WasteReport newWasteReport { get; set; } = new WasteReport
    {
        WasteDate = DateTime.Now
    };

    private Modal newWasteReportModal = default!;
    private string? message;
    private string messageClass = string.Empty;

    private List<string> wasteTypes = new List<string> { "Organic", "Plastic", "Metal", "Wood", "Paper", "Electronic", "Incineration" };
    private List<string> wasteFacilities = new List<string> { "Recycling", "Incineration", "Landfill", "Composting" };

    public async Task ShowModal()
    {
        await newWasteReportModal.ShowAsync();
    }

    public async Task HideModal()
    {
        await newWasteReportModal.HideAsync();
    }

    private async Task HandleSubmit()
    {
        newWasteReport.WasteDate = newWasteReport.WasteDate.Date.Add(DateTime.Now.TimeOfDay);

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.PostAsJsonAsync("api/WasteReports", newWasteReport);

            if (response.IsSuccessStatusCode)
            {
                message = "Waste report submitted successfully!";
                messageClass = "alert-success";
                await newWasteReportModal.HideAsync();

                // Trigger the callback for the parent component to navigate to the current path
                await OnSubmitSuccess.InvokeAsync();
            }
            else
            {
                message = "Submission failed!";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
        }
    }
}
