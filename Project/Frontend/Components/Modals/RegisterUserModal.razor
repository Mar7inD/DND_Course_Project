@inherits LayoutComponentBase
@inject IHttpClientFactory ClientFactory

<Modal @ref="registerUserModal" title="Add New User" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="employeeId" class="form-label">Employee ID</label>
                <InputText id="employeeId" class="form-control" @bind-Value="@registerModel.EmployeeId" />
            </div>

            <div class="mb-3">
                <label for="name" class="form-label">Full Name</label>
                <InputText id="name" class="form-control" @bind-Value="@registerModel.Name" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="@registerModel.Password" />
            </div>

            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <InputSelect id="role" class="form-select" @bind-Value="@registerModel.Role">
                    <option value="">Select a role</option>
                    <option value="Employee">Employee</option>
                    <option value="Manager">Manager</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@if (message != null)
{
    <div class="alert @messageClass mt-3">
        @message
    </div>
}

@code {
    [Parameter] public EventCallback OnSuccess { get; set; }

    private PersonBase registerModel = new PersonBase();
    private Modal registerUserModal = default!;
    private string? message;
    private string messageClass = string.Empty;

    public async Task ShowModal()
    {
        registerModel = new PersonBase(); // Reset form data
        message = null; // Reset message
        await registerUserModal.ShowAsync();
    }

    public async Task HideModal()
    {
        await registerUserModal.HideAsync();
    }

    private async Task HandleRegister()
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.PostAsJsonAsync("api/People/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                message = "User registered successfully!";
                messageClass = "alert-success";
                await registerUserModal.HideAsync();
                await OnSuccess.InvokeAsync(); // Notify parent component
            }
            else
            {
                message = "Registration failed!";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
        }
    }
}
